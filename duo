#!/bin/bash

red='\e[31m'
yellow='\e[33m'
green='\e[32m'
none='\e[0m'

# 自动安装curl
install_curl() {
    if [[ -x "$(command -v apt-get)" ]]; then
        apt-get update
        apt-get install -y curl
    elif [[ -x "$(command -v yum)" ]]; then
        yum install -y curl
    else
        echo -e "\n${red}错误!${none} 无法安装 ${yellow}curl.${none} 未知的包管理器.\n" && exit 1
    fi
}

# 检查端口是否被占用并询问是否释放端口
free_port() {
    local port=$1
    local pid=$(lsof -t -i:$port -sTCP:LISTEN)
    if [ ! -z "$pid" ]; then
        echo -e "${yellow}警告: 端口 $port 已被进程 $pid 占用.${none}"
        read -p "是否强制释放端口? [Y/N]: " confirm
        if [[ $confirm == "Y" || $confirm == "y" ]]; then
            kill -9 $pid
            echo -e "${green}端口 $port 已释放.${none}"
        else
            echo -e "${red}脚本已停止运行。${none}"
            exit 1
        fi
    fi
}

# 查询已部署的所有节点
list_nodes() {
    config_dir="/usr/local/etc/xray"
    if [[ -d "$config_dir" ]]; then
        for config_file in "$config_dir"/*.json; do
            if [[ $config_file == *"_inbound_"* ]]; then
                node_name=$(basename "$config_file" .json)
                echo "节点名称: $node_name"
                echo "节点配置文件路径: $config_file"
                echo ""
            fi
        done
    else
        echo "未找到节点配置文件目录: $config_dir"
    fi
}

# 主脚本开始
if ! type curl &>/dev/null; then
    echo -e "\n${red}错误!${none} 未找到 ${yellow}curl.${none} 正在安装...\n"
    install_curl
fi

[[ $EUID != 0 ]] && {
    echo -e "\n${red}错误!${none} 当前非 ${yellow}ROOT用户.${none}请执行sudo -i命令后再运行\n" && exit 1
}

if type xray &>/dev/null; then
    echo "检测到 xray 已安装，继续执行后续步骤."
else
    echo "正在安装 xray..."
    bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)"
    if ! type xray &>/dev/null; then
        echo -e "\n${red}错误!${none} xray 安装失败，请检查安装脚本是否正常运行.\n" && exit 1
    fi
fi

local_ip=$(curl -s http://api64.ipify.org)
if [[ ! $local_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "无法获取本机IPv4地址，请手动输入."
    read -p "请输入本机的IP地址: " local_ip
    if [[ ! $local_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "\n${red}错误!${none} 无效的IP地址.\n" && exit 1
    fi
fi

config_dir="/usr/local/etc/xray"
mkdir -p "$config_dir"

# 用户是否保留之前的入站和出站配置
read -p "是否保留之前的入站和出站配置？ [Y/N]: " keep_config
if [[ $keep_config == "N" || $keep_config == "n" ]]; then
    # 删除现有的xray配置文件
    rm -f "$config_dir"/*.json
fi

total_config="$config_dir/config.json"
echo "{" > "$total_config"
echo "  \"inbounds\": [" >> "$total_config"

declare -A vmess_links
declare -A outbound_addresses

# 获取已有节点数量
num_nodes=0
for f in "$config_dir"/*.json; do
    if [[ $f == *"_inbound_"* ]]; then
        num_nodes=$((num_nodes + 1))
    fi
done

for ((i=1; i<=num_nodes; i++)); do
    vmess_port=$((10000 + i))
    free_port $vmess_port

    vmess_id=$(cat /proc/sys/kernel/random/uuid)

    cat >> "$total_config" << EOF
    {
        "listen": "0.0.0.0",
        "port": $vmess_port,
        "protocol": "vmess",
        "settings": {
            "clients": [
                {
                    "id": "$vmess_id"
                }
            ]
        },
        "streamSettings": {
            "network": "ws",
            "security": "none",
            "wsSettings": {
                "path": "/dockerlnmp"
            }
        },
        "tag": "inbound$i"
    }$(if [[ $i -lt $num_nodes ]]; then echo ","; fi)
EOF

    vmess_link="vmess://$(echo -n "{\"v\":\"2\",\"ps\":\"节点$i\",\"add\":\"$local_ip\",\"port\":$vmess_port,\"id\":\"$vmess_id\",\"aid\":0,\"net\":\"ws\",\"path\":\"/dockerlnmp\",\"type\":\"none\"}" | base64 -w 0)"
    vmess_links[$i]="$vmess_link"
done

echo "  ]," >> "$total_config"
echo "  \"outbounds\": [" >> "$total_config"

for ((i=1; i<=num_nodes; i++)); do
    echo "配置第 $i 个出站代理 (节点$i)"
    read -p "请输入出站sk5地址, 端口, 用户名, 密码 (以空格分隔): " addr port user pass

    outbound_addresses[$i]="$addr:$port"

    cat >> "$total_config" << EOF
    {
        "protocol": "socks",
        "settings": {
            "servers": [
                {
                    "address": "$addr",
                    "port": $port,
                    "users": [
                        {
                            "user": "$user",
                            "pass": "$pass"
                        }
                    ]
                }
            ]
        },
        "tag": "outbound$i"
    }$(if [[ $i -lt $num_nodes ]]; then echo ","; fi)
EOF
done

echo "  ]," >> "$total_config"

# 添加路由规则
echo "  \"routing\": {" >> "$total_config"
echo "    \"rules\": [" >> "$total_config"
for ((i=1; i<=num_nodes; i++)); do
    cat >> "$total_config" << EOF
    {
        "type": "field",
        "inboundTag": ["inbound$i"],
        "outboundTag": "outbound$i"
    }$(if [[ $i -lt $num_nodes ]]; then echo ","; fi)
EOF
done
echo "    ]" >> "$total_config"
echo "  }" >> "$total_config"

echo "}" >> "$total_config"

if [[ $num_nodes -gt 0 ]]; then
    systemctl restart xray
    echo -e "${green}启动成功！节点配置文件路径为：${config_dir}${none}"

    echo -e "\n${yellow}（TG交流群：@kexueshangwang8）（此脚本为大漂亮所写）节点链接和对应的出站代理信息:${none}"
    for ((i=1; i<=num_nodes; i++)); do
        echo -e "${yellow}节点 $i 链接:${none} ${vmess_links[$i]}"
        echo -e "${yellow}节点 $i 对应的落地sk5地址:${none} ${outbound_addresses[$i]}"
    done
fi

# 查询已部署的所有节点
echo -e "\n${yellow}已部署的所有节点:${none}\n"
list_nodes
