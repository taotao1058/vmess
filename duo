#!/bin/bash

red='\e[31m'
yellow='\e[33m'
green='\e[32m'
none='\e[0m'
config_file="/usr/local/etc/xray/config.json"

# 检查 jq 工具是否安装
check_jq_installed() {
    if ! type jq &>/dev/null; then
        echo -e "${yellow}正在安装 jq 工具...${none}"
        apt-get update && apt-get install -y jq
    fi
}

# 获取本机公网 IP
get_local_ip() {
    local ip=$(curl -s http://api64.ipify.org)
    if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "$ip"
    else
        echo "无法自动获取公网IP地址，请手动输入。"
        read -p "请输入您的公网IP地址: " manual_ip
        if [[ $manual_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "$manual_ip"
        else
            echo "输入的IP地址格式不正确，请重新运行脚本并输入有效的公网IP地址。"
            exit 1
        fi
    fi
}


# 显示所有入站配置
show_inbound_configs() {
    local config=$(jq '.' "$config_file")
    echo -e "${green}入站节点配置:${none}"

    for i in $(jq -r '.inbounds | keys[]' <<< "$config"); do
        local port=$(jq -r ".inbounds[$i].port" <<< "$config")
        local tag=$(jq -r ".inbounds[$i].tag" <<< "$config")
        local outboundTag=$(jq -r ".routing.rules[] | select(.inboundTag == \"$tag\") | .outboundTag" <<< "$config")
        local outboundAddr=$(jq -r ".outbounds[] | select(.tag == \"$outboundTag\") | .settings.servers[0].address" <<< "$config")
        local outboundPort=$(jq -r ".outbounds[] | select(.tag == \"$outboundTag\") | .settings.servers[0].port" <<< "$config")

        echo -e "${yellow}序号: ${i}${none} - 端口: ${port}, 出站地址: ${outboundAddr}:${outboundPort}"
    done
}

# 添加新节点
add_new_nodes() {
    read -p "请输入要添加的节点数量: " num_nodes
    if ! [[ $num_nodes =~ ^[0-9]+$ ]]; then
        echo -e "${red}错误!${none} 请输入有效的数量。\n"
        return
    fi

    local max_port=$(jq '[.inbounds[].port] | max // 10000' "$config_file")
    local start_port=$((max_port+1))

    for ((i=0; i<num_nodes; i++)); do
        local new_port=$((start_port+i))
        local new_tag="inbound$new_port"
        local new_outbound_tag="outbound$new_port"
        local new_id=$(uuidgen)

        # 用户输入出站代理信息
        echo "配置第 $((i+1)) 个出站代理 (节点$new_port)"
        read -p "请输入出站socks5地址, 端口, 用户名, 密码 (以空格分隔): " outbound_addr outbound_port outbound_user outbound_pass

        # 添加入站配置
        jq --argjson port "$new_port" --arg id "$new_id" --arg tag "$new_tag" '
        .inbounds += [{
            port: $port,
            protocol: "vmess",
            settings: { clients: [{ id: $id }] },
            streamSettings: { network: "ws", security: "none", wsSettings: { path: "/websocket" } },
            tag: $tag
        }]' "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"

        # 添加出站配置
        jq --arg tag "$new_outbound_tag" --arg addr "$outbound_addr" --argjson port "$outbound_port" --arg user "$outbound_user" --arg pass "$outbound_pass" '
        .outbounds += [{
            protocol: "socks",
            settings: { servers: [{ address: $addr, port: $port, users: [{ user: $user, pass: $pass }] }] },
            tag: $tag
        }]' "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"

        # 添加路由规则
        jq --arg inTag "$new_tag" --arg outTag "$new_outbound_tag" '
        .routing.rules += [{ type: "field", inboundTag: [$inTag], outboundTag: $outTag }]
        ' "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"
    done

    echo -e "${green}已成功添加 $num_nodes 个节点。${none}"
}

# 删除节点
delete_node() {
    read -p "请输入要删除的节点序号: " node_index
    if ! [[ $node_index =~ ^[0-9]+$ ]]; then
        echo -e "${red}错误!${none} 请输入有效的序号。\n"
        return
    fi

    local tag=$(jq -r ".inbounds[$node_index].tag" "$config_file")
    jq "del(.inbounds[$node_index]) | del(.routing.rules[] | select(.inboundTag == \"$tag\")) | del(.outbounds[] | select(.tag == \"$tag\"))" "$config_file" > "$config_file.tmp" && mv "$config_file.tmp" "$config_file"
    
    echo -e "${green}已删除序号为 $node_index 的节点。${none}"
}

# 主菜单
main_menu() {
    while true; do
        echo -e "\n${green}菜单:${none}"
        echo "1. 查看所有节点连接信息"
        echo "2. 新增节点配置"
        echo "3. 删除节点"
        echo "4. 退出"
        read -p "请输入选项: " choice

        case $choice in
            1) show_inbound_configs ;;
            2) add_new_nodes ;;
            3) delete_node ;;
            4) break ;;
            *) echo -e "${red}无效的选项，请重新选择。${none}" ;;
        esac
    done
}

check_jq_installed
local_ip=$(get_local_ip)
main_menu
