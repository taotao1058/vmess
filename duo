#!/bin/bash

red='\e[31m'
yellow='\e[33m'
green='\e[32m'
none='\e[0m'

# 自动安装curl
install_curl() {
    if [[ -x "$(command -v apt-get)" ]]; then
        apt-get update
        apt-get install -y curl
    elif [[ -x "$(command -v yum)" ]]; then
        yum install -y curl
    else
        echo -e "\n${red}错误!${none} 无法安装 ${yellow}curl.${none} 未知的包管理器.\n" && exit 1
    fi
}

# 查找未被占用的端口
find_available_port() {
    local port="$1"
    while true; do
        if [[ ! -e "/usr/local/etc/xray/inbound$port.json" ]]; then
            echo "$port"
            break
        else
            port=$((port + 1))
        fi
    done
}

# 检查是否安装了curl
if ! type curl &>/dev/null; then
    echo -e "\n${red}错误!${none} 未找到 ${yellow}curl.${none} 正在安装...\n"
    install_curl
fi

[[ $EUID != 0 ]] && {
    echo -e "\n${red}错误!${none} 当前非 ${yellow}ROOT用户.${none}请执行sudo -i命令后再运行\n" && exit 1
}

# 检查是否安装xray
if type xray &>/dev/null; then
    echo "检测到 xray 已安装，继续执行后续步骤."
else
    echo "正在安装 xray..."
    bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)"
    if ! type xray &>/dev/null; then
        echo -e "\n${red}错误!${none} xray 安装失败，请检查安装脚本是否正常运行.\n" && exit 1
    fi
fi

local_ip=$(curl -s http://api64.ipify.org)
if [[ ! $local_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "无法获取本机IPv4地址，请手动输入."
    read -p "请输入本机的IP地址: " local_ip
    if [[ ! $local_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "\n${red}错误!${none} 无效的IP地址.\n" && exit 1
    fi
fi

config_dir="/usr/local/etc/xray"
mkdir -p "$config_dir"

declare -A vmess_links
declare -A outbound_addresses

# 添加节点查询和删除的菜单
while true; do
    echo -e "\n${green}菜单:${none}"
    echo "1. 部署新节点(保留原有节点)"
    echo "2. 查询所有的节点链接"
    echo "3. 删除节点"
    echo "4. 退出"

    read -p "请输入菜单选项: " choice
    case $choice in
        1)
            # 用户选择部署新节点
            read -p "请输入需要配置的节点数量: " num_nodes
            # 继续执行节点部署的逻辑，这部分可以根据用户选择是否保留配置来决定

            # 清除旧的节点计数
            unset vmess_links
            unset outbound_addresses

            for ((i=1; i<=num_nodes; i++)); do
                vmess_port=$(find_available_port 10000)
                vmess_id=$(cat /proc/sys/kernel/random/uuid)

                cat > "$config_dir/inbound$vmess_port.json" << EOF
                {
                    "inbound": {
                        "port": $vmess_port,
                        "protocol": "vmess",
                        "settings": {
                            "clients": [
                                {
                                    "id": "$vmess_id"
                                }
                            ]
                        },
                        "streamSettings": {
                            "network": "ws",
                            "security": "none",
                            "wsSettings": {
                                "path": "/dockerlnmp"
                            }
                        }
                    }
                }
EOF
                vmess_link="vmess://$(echo -n "{\"v\":\"2\",\"ps\":\"节点$i\",\"add\":\"$local_ip\",\"port\":$vmess_port,\"id\":\"$vmess_id\",\"aid\":0,\"net\":\"ws\",\"path\":\"/dockerlnmp\",\"type\":\"none\"}" | base64 -w 0)"
                vmess_links[$i]="$vmess_link"
            done

            for ((i=1; i<=num_nodes; i++)); do
                echo "配置第 $i 个出站代理 (节点$i)"
                read -p "请输入出站sk5地址, 端口, 用户名, 密码 (以空格分隔): " addr port user pass

                outbound_addresses[$i]="$addr:$port"

                cat > "$config_dir/outbound$vmess_port.json" << EOF
                {
                    "outbound": {
                        "protocol": "socks",
                        "settings": {
                            "servers": [
                                {
                                    "address": "$addr",
                                    "port": $port,
                                    "users": [
                                        {
                                            "user": "$user",
                                            "pass": "$pass"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                }
EOF
            done

            systemctl restart xray
            echo -e "${green}启动成功！节点配置文件路径为：${config_dir}${none}"

            echo -e "\n${yellow}节点链接和对应的出站代理信息:${none}"
            for ((i=1; i<=num_nodes; i++)); do
                echo -e "${yellow}节点 $i 链接:${none} ${vmess_links[$i]}"
                echo -e "${yellow}节点 $i 对应的落地sk5地址:${none} ${outbound_addresses[$i]}"
            done
            ;;
        2)
            # 查询所有节点链接的逻辑，可以输出已配置节点的链接
            echo -e "\n${yellow}节点链接和对应的出站代理信息:${none}"
            for file in "$config_dir"/inbound*.json; do
                port=$(basename "$file" | sed 's/inbound\([0-9]*\).json/\1/')
                vmess_link="vmess://$(echo -n "{\"v\":\"2\",\"ps\":\"节点$port\",\"add\":\"$local_ip\",\"port\":$port,\"id\":\"$(cat /proc/sys/kernel/random/uuid)\",\"aid\":0,\"net\":\"ws\",\"path\":\"/dockerlnmp\",\"type\":\"none\"}" | base64 -w 0)"
                echo -e "${yellow}节点 $port 链接:${none} $vmess_link"
                outbound_file="$config_dir/outbound$port.json"
                if [[ -e "$outbound_file" ]]; then
                    addr=$(jq -r .outbound.settings.servers[0].address "$outbound_file")
                    port=$(jq -r .outbound.settings.servers[0].port "$outbound_file")
                    echo -e "${yellow}节点 $port 对应的落地sk5地址:${none} $addr:$port"
                fi
            done
            ;;
        3)
            # 删除节点的逻辑，可以根据用户选择删除指定节点的配置文件
            read -p "请输入要删除的节点端口号（以逗号分隔，例如：10000,10001）: " ports_to_delete
            IFS=',' read -ra port_array <<< "$ports_to_delete"
            for port in "${port_array[@]}"; do
                inbound_file="$config_dir/inbound$port.json"
                outbound_file="$config_dir/outbound$port.json"
                if [[ -e "$inbound_file" ]]; then
                    rm -f "$inbound_file"
                    echo "节点 $port 的配置文件已删除。"
                fi
                if [[ -e "$outbound_file" ]]; then
                    rm -f "$outbound_file"
                    echo "节点 $port 对应的出站代理配置文件已删除。"
                fi
            done
            systemctl restart xray
            ;;
        4)
            exit 0
            ;;
        *)
            echo "无效的选项，请重新选择。"
            ;;
    esac
done
