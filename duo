#!/bin/bash

red='\e[31m'
yellow='\e[33m'
green='\e[32m'
none='\e[0m'

# 检查并安装必要的工具
install_tools() {
    if ! type curl &>/dev/null; then
        echo -e "\n${red}错误!${none} 需要安装 ${yellow}curl.${none}\n" && exit 1
    fi

    if ! type lsof &>/dev/null; then
        echo -e "\n${yellow}安装 ${green}lsof${none} 工具中...\n"
        apt-get update && apt-get install -y lsof
    fi

    if ! type jq &>/dev/null; then
        echo -e "\n${yellow}安装 ${green}jq${none} 工具中...\n"
        apt-get update && apt-get install -y jq
    fi
}

# 检查并安装xray
install_xray() {
    if type xray &>/dev/null; then
        echo "检测到 xray 已安装，继续执行后续步骤."
    else
        echo "正在安装 xray..."
        bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)"
        if ! type xray &>/dev/null; then
            echo -e "\n${red}错误!${none} xray 安装失败，请检查安装脚本是否正常运行.\n" && exit 1
        fi
    fi
}

# 获取本机IP地址
get_local_ip() {
    local local_ip=$(curl -s http://api64.ipify.org)
    if [[ ! $local_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "无法获取本机IPv4地址，请手动输入."
        read -p "请输入本机的IP地址: " local_ip
        if [[ ! $local_ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo -e "\n${red}错误!${none} 无效的IP地址.\n" && exit 1
        fi
    fi
    echo $local_ip
}

# 检查是否为ROOT用户
[[ $EUID != 0 ]] && {
    echo -e "\n${red}错误!${none} 当前非 ${yellow}ROOT用户.${none}请执行sudo -i命令后再运行\n" && exit 1
}

# 安装必要工具
install_tools

# 安装xray
install_xray

local_ip=$(get_local_ip)

# 配置文件目录
config_dir="/usr/local/etc/xray"
mkdir -p "$config_dir"
total_config="$config_dir/config.json"

# 声明关联数组
declare -A vmess_links
declare -A outbound_addresses

# 寻找未被占用的端口
find_free_port() {
    local port=10000
    while true; do
        if ! lsof -i:$port &>/dev/null; then
            echo $port
            break
        fi
        ((port++))
    done
}

# 创建新节点
create_node() {
    local node_num=$1
    local vmess_port=$(find_free_port)
    local vmess_id=$(cat /proc/sys/kernel/random/uuid)

    # 为入站节点添加出站配置
    echo "配置第 $node_num 个出站代理 (节点$node_num)"
    read -p "请输入出站socks5地址, 端口, 用户名, 密码 (以空格分隔): " addr port user pass

    # 添加新节点到配置文件
    jq --arg port "$vmess_port" --arg id "$vmess_id" --arg tag "inbound$node_num" --arg addr "$addr" --argjson port "$port" --arg user "$user" --arg pass "$pass" '
    .inbounds += [{
        listen: "0.0.0.0",
        port: ($port | tonumber),
        protocol: "vmess",
        settings: { clients: [{ id: $id }] },
        streamSettings: { network: "ws", security: "none", wsSettings: { path: "/dockerlnmp" } },
        tag: $tag
    }] |
    .outbounds += [{
        protocol: "socks",
        settings: { servers: [{ address: $addr, port: ($port | tonumber), users: [{ user: $user, pass: $pass }] }] },
        tag: ("outbound" + $tag)
    }]' "$total_config" > "$config_dir/tmp_config.json" && mv "$config_dir/tmp_config.json" "$total_config"

    local vmess_link="vmess://$(echo -n "{\"v\":\"2\",\"ps\":\"节点$node_num\",\"add\":\"$local_ip\",\"port\":$vmess_port,\"id\":\"$vmess_id\",\"aid\":0,\"net\":\"ws\",\"path\":\"/dockerlnmp\",\"type\":\"none\"}" | base64 -w 0)"
    vmess_links[$node_num]="$vmess_link"
    outbound_addresses[$node_num]="$addr:$port"
}



# 删除节点
delete_node() {
    local del_port=$1
    jq --argjson delPort $del_port '.inbounds |= map(select(.port != $delPort))' "$total_config" > "$config_dir/tmp_config.json" && mv "$config_dir/tmp_config.json" "$total_config"
}

# 菜单逻辑
while true; do
    echo -e "\n${green}菜单:${none}"
    echo "1. 创建新节点"
    echo "2. 查看所有节点连接信息"
    echo "3. 删除节点"
    echo "4. 退出"

    read -p "请输入选项: " choice
    case $choice in
        1)
            read -p "请输入要添加的节点数量: " num_nodes
            if ! [[ $num_nodes =~ ^[0-9]+$ ]]; then
                echo -e "\n${red}错误!${none} 无效的数量.\n" && exit 1
            fi

            for ((i=1; i<=num_nodes; i++)); do
                create_node $i
            done

            systemctl restart xray
            ;;
        2)
            echo -e "\n${yellow}节点链接信息:${none}"
            config=$(jq '.' "$total_config")
            for i in $(jq -r '.inbounds | keys[]' <<< "$config"); do
                local port=$(jq -r ".inbounds[$i].port" <<< "$config")
                local tag=$(jq -r ".inbounds[$i].tag" <<< "$config")
                local vmess_id=$(jq -r ".inbounds[$i].settings.clients[0].id" <<< "$config")
                local vmess_link="vmess://$(echo -n "{\"v\":\"2\",\"ps\":\"$tag\",\"add\":\"$local_ip\",\"port\":$port,\"id\":\"$vmess_id\",\"aid\":0,\"net\":\"ws\",\"path\":\"/dockerlnmp\",\"type\":\"none\"}" | base64 -w 0)"
                echo -e "${yellow}节点 $tag 链接:${none} $vmess_link"
                echo -e "${yellow}节点 $tag 对应的出站地址:${none} ${outbound_addresses[$tag]}"
            done
            echo -e "\n节点配置文件路径: ${green}${total_config}${none}"
            ;;
        3)
            read -p "请输入要删除的节点端口号: " del_port
            if [[ $del_port =~ ^[0-9]+$ ]]; then
                delete_node $del_port
                systemctl restart xray
            else
                echo -e "\n${red}错误!${none} 无效的端口号.\n"
            fi
            ;;
        4)
            break
            ;;
        *)
            echo -e "${red}无效的选项，请重新选择。${none}"
            ;;
    esac
done
